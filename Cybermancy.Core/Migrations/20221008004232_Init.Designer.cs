// <auto-generated />
using System;
using Cybermancy.Core;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Cybermancy.Core.Migrations
{
    [DbContext(typeof(CybermancyDbContext))]
    [Migration("20221008004232_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Cybermancy.Domain.Attachment", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Cybermancy.Domain.Channel", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsXpIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("Cybermancy.Domain.Guild", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("ModChannelLog")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLevelSettings", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Amount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(5);

                    b.Property<int>("Base")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(15);

                    b.Property<decimal?>("LevelChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("LevelChannelLogsId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Modifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(50);

                    b.Property<bool>("ModuleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<TimeSpan>("TextTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("interval")
                        .HasDefaultValue(new TimeSpan(0, 0, 3, 0, 0));

                    b.HasKey("GuildId");

                    b.HasIndex("LevelChannelLogsId");

                    b.ToTable("GuildLevelSettings");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLogSettings", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("AvatarChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("BulkDeleteChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DeleteChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("EditChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("JoinChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("LeaveChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("ModuleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("NicknameChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("UsernameChannelLogId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.HasIndex("AvatarChannelLogId")
                        .IsUnique();

                    b.HasIndex("BulkDeleteChannelLogId")
                        .IsUnique();

                    b.HasIndex("DeleteChannelLogId")
                        .IsUnique();

                    b.HasIndex("EditChannelLogId")
                        .IsUnique();

                    b.HasIndex("JoinChannelLogId")
                        .IsUnique();

                    b.HasIndex("LeaveChannelLogId")
                        .IsUnique();

                    b.HasIndex("NicknameChannelLogId")
                        .IsUnique();

                    b.HasIndex("UsernameChannelLogId")
                        .IsUnique();

                    b.ToTable("GuildLogSettings");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildModerationSettings", b =>
                {
                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("Duration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(30);

                    b.Property<int>("DurationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(3);

                    b.Property<bool>("ModuleEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MuteRole")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("PublicBanLog")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("GuildId");

                    b.ToTable("GuildModerationSettings");
                });

            modelBuilder.Entity("Cybermancy.Domain.Lock", b =>
                {
                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ModeratorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool?>("PreviousSetting")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("ModeratorId", "GuildId");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("Cybermancy.Domain.Member", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsXpIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("UserId", "GuildId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Cybermancy.Domain.Message", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("CreatedTimestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("ReferencedMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId", "GuildId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Cybermancy.Domain.MessageHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<int>("Action")
                        .HasColumnType("integer");

                    b.Property<decimal?>("DeletedByModeratorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("TimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("GuildId", "DeletedByModeratorId");

                    b.ToTable("MessageHistory");
                });

            modelBuilder.Entity("Cybermancy.Domain.Mute", b =>
                {
                    b.Property<long>("SinId")
                        .HasColumnType("bigint");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("SinId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId", "GuildId");

                    b.ToTable("Mutes");
                });

            modelBuilder.Entity("Cybermancy.Domain.NicknameHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId", "GuildId");

                    b.ToTable("NicknameHistory");
                });

            modelBuilder.Entity("Cybermancy.Domain.OldLogMessage", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.HasIndex("GuildId");

                    b.ToTable("OldLogMessages");
                });

            modelBuilder.Entity("Cybermancy.Domain.Pardon", b =>
                {
                    b.Property<long>("SinId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ModeratorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("PardonDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.HasKey("SinId");

                    b.HasIndex("GuildId");

                    b.HasIndex("ModeratorId", "GuildId");

                    b.ToTable("Pardons");
                });

            modelBuilder.Entity("Cybermancy.Domain.PublishedMessage", b =>
                {
                    b.Property<long>("SinId")
                        .HasColumnType("bigint");

                    b.Property<int>("PublishType")
                        .HasColumnType("integer");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("SinId", "PublishType");

                    b.ToTable("PublishedMessages");
                });

            modelBuilder.Entity("Cybermancy.Domain.Reaction", b =>
                {
                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("EmojiId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("MessageId", "EmojiId");

                    b.HasIndex("GuildId");

                    b.HasIndex("UserId", "GuildId");

                    b.ToTable("Reaction");
                });

            modelBuilder.Entity("Cybermancy.Domain.Reward", b =>
                {
                    b.Property<decimal>("RoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<int>("RewardLevel")
                        .HasColumnType("integer");

                    b.HasKey("RoleId");

                    b.HasIndex("GuildId");

                    b.ToTable("Rewards");
                });

            modelBuilder.Entity("Cybermancy.Domain.Role", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("IsXpIgnored")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Cybermancy.Domain.Sin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("InfractionOn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("ModeratorId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("SinType")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("ModeratorId", "GuildId");

                    b.HasIndex("UserId", "GuildId");

                    b.ToTable("Sins");
                });

            modelBuilder.Entity("Cybermancy.Domain.Tracker", b =>
                {
                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("EndTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("LogChannelId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("ModeratorId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("UserId", "GuildId");

                    b.HasIndex("GuildId");

                    b.HasIndex("LogChannelId");

                    b.HasIndex("ModeratorId", "GuildId");

                    b.ToTable("Trackers");
                });

            modelBuilder.Entity("Cybermancy.Domain.User", b =>
                {
                    b.Property<decimal>("Id")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Cybermancy.Domain.UsernameHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<DateTimeOffset>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UsernameHistory");
                });

            modelBuilder.Entity("Cybermancy.Domain.XpHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<long>("Id"));

                    b.Property<decimal?>("AwarderId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal>("GuildId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTimeOffset>("TimeOut")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<decimal>("UserId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("Xp")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GuildId");

                    b.HasIndex("AwarderId", "GuildId");

                    b.HasIndex("UserId", "GuildId");

                    b.ToTable("XpHistory");
                });

            modelBuilder.Entity("Cybermancy.Domain.Attachment", b =>
                {
                    b.HasOne("Cybermancy.Domain.Message", "Message")
                        .WithMany("Attachments")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Cybermancy.Domain.Channel", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLevelSettings", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithOne("LevelSettings")
                        .HasForeignKey("Cybermancy.Domain.GuildLevelSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Channel", "LevelChannelLogs")
                        .WithMany()
                        .HasForeignKey("LevelChannelLogsId");

                    b.Navigation("Guild");

                    b.Navigation("LevelChannelLogs");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildLogSettings", b =>
                {
                    b.HasOne("Cybermancy.Domain.Channel", "AvatarChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "AvatarChannelLogId");

                    b.HasOne("Cybermancy.Domain.Channel", "BulkDeleteChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "BulkDeleteChannelLogId");

                    b.HasOne("Cybermancy.Domain.Channel", "DeleteChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "DeleteChannelLogId");

                    b.HasOne("Cybermancy.Domain.Channel", "EditChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "EditChannelLogId");

                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithOne("LogSettings")
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Channel", "JoinChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "JoinChannelLogId");

                    b.HasOne("Cybermancy.Domain.Channel", "LeaveChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "LeaveChannelLogId");

                    b.HasOne("Cybermancy.Domain.Channel", "NicknameChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "NicknameChannelLogId");

                    b.HasOne("Cybermancy.Domain.Channel", "UsernameChannelLog")
                        .WithOne()
                        .HasForeignKey("Cybermancy.Domain.GuildLogSettings", "UsernameChannelLogId");

                    b.Navigation("AvatarChannelLog");

                    b.Navigation("BulkDeleteChannelLog");

                    b.Navigation("DeleteChannelLog");

                    b.Navigation("EditChannelLog");

                    b.Navigation("Guild");

                    b.Navigation("JoinChannelLog");

                    b.Navigation("LeaveChannelLog");

                    b.Navigation("NicknameChannelLog");

                    b.Navigation("UsernameChannelLog");
                });

            modelBuilder.Entity("Cybermancy.Domain.GuildModerationSettings", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithOne("ModerationSettings")
                        .HasForeignKey("Cybermancy.Domain.GuildModerationSettings", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.Lock", b =>
                {
                    b.HasOne("Cybermancy.Domain.Channel", "Channel")
                        .WithOne("Lock")
                        .HasForeignKey("Cybermancy.Domain.Lock", "ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("LockedChannels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Moderator")
                        .WithMany("ChannelsLocked")
                        .HasForeignKey("ModeratorId", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Cybermancy.Domain.Member", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Members")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany("MemberProfiles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybermancy.Domain.Message", b =>
                {
                    b.HasOne("Cybermancy.Domain.Channel", "Channel")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Messages")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("Messages")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Guild");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Cybermancy.Domain.MessageHistory", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("MessageHistory")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Message", "Message")
                        .WithMany("MessageHistory")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "DeletedByModerator")
                        .WithMany("MessagesDeletedAsModerator")
                        .HasForeignKey("GuildId", "DeletedByModeratorId")
                        .HasPrincipalKey("GuildId", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("DeletedByModerator");

                    b.Navigation("Guild");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Cybermancy.Domain.Mute", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("ActiveMutes")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Sin", "Sin")
                        .WithOne("Mute")
                        .HasForeignKey("Cybermancy.Domain.Mute", "SinId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("ActiveMutes")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Member");

                    b.Navigation("Sin");
                });

            modelBuilder.Entity("Cybermancy.Domain.NicknameHistory", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("NicknamesHistory")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Cybermancy.Domain.OldLogMessage", b =>
                {
                    b.HasOne("Cybermancy.Domain.Channel", "Channel")
                        .WithMany("OldMessages")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("OldLogMessages")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.Pardon", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Sin", "Sin")
                        .WithOne("Pardon")
                        .HasForeignKey("Cybermancy.Domain.Pardon", "SinId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Cybermancy.Domain.Member", "Moderator")
                        .WithMany("SinsPardoned")
                        .HasForeignKey("ModeratorId", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Moderator");

                    b.Navigation("Sin");
                });

            modelBuilder.Entity("Cybermancy.Domain.PublishedMessage", b =>
                {
                    b.HasOne("Cybermancy.Domain.Sin", "Sin")
                        .WithMany("PublishMessages")
                        .HasForeignKey("SinId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sin");
                });

            modelBuilder.Entity("Cybermancy.Domain.Reaction", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany()
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Message", "Message")
                        .WithMany("Reactions")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("Reactions")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Member");

                    b.Navigation("Message");
                });

            modelBuilder.Entity("Cybermancy.Domain.Reward", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Rewards")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Role", "Role")
                        .WithOne("Reward")
                        .HasForeignKey("Cybermancy.Domain.Reward", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Guild");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cybermancy.Domain.Role", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Roles")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("Cybermancy.Domain.Sin", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Sins")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Moderator")
                        .WithMany("ModeratedSins")
                        .HasForeignKey("ModeratorId", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("UserSins")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("Member");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Cybermancy.Domain.Tracker", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("Trackers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Channel", "LogChannel")
                        .WithMany("Trackers")
                        .HasForeignKey("LogChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Moderator")
                        .WithMany("TrackedUsers")
                        .HasForeignKey("ModeratorId", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("Trackers")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("LogChannel");

                    b.Navigation("Member");

                    b.Navigation("Moderator");
                });

            modelBuilder.Entity("Cybermancy.Domain.UsernameHistory", b =>
                {
                    b.HasOne("Cybermancy.Domain.User", "User")
                        .WithMany("UsernameHistories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cybermancy.Domain.XpHistory", b =>
                {
                    b.HasOne("Cybermancy.Domain.Guild", "Guild")
                        .WithMany("XpHistory")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cybermancy.Domain.Member", "Awarder")
                        .WithMany("AwardRecipients")
                        .HasForeignKey("AwarderId", "GuildId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Cybermancy.Domain.Member", "Member")
                        .WithMany("XpHistory")
                        .HasForeignKey("UserId", "GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Awarder");

                    b.Navigation("Guild");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("Cybermancy.Domain.Channel", b =>
                {
                    b.Navigation("Lock")
                        .IsRequired();

                    b.Navigation("Messages");

                    b.Navigation("OldMessages");

                    b.Navigation("Trackers");
                });

            modelBuilder.Entity("Cybermancy.Domain.Guild", b =>
                {
                    b.Navigation("ActiveMutes");

                    b.Navigation("Channels");

                    b.Navigation("LevelSettings")
                        .IsRequired();

                    b.Navigation("LockedChannels");

                    b.Navigation("LogSettings")
                        .IsRequired();

                    b.Navigation("Members");

                    b.Navigation("MessageHistory");

                    b.Navigation("Messages");

                    b.Navigation("ModerationSettings")
                        .IsRequired();

                    b.Navigation("OldLogMessages");

                    b.Navigation("Rewards");

                    b.Navigation("Roles");

                    b.Navigation("Sins");

                    b.Navigation("Trackers");

                    b.Navigation("XpHistory");
                });

            modelBuilder.Entity("Cybermancy.Domain.Member", b =>
                {
                    b.Navigation("ActiveMutes");

                    b.Navigation("AwardRecipients");

                    b.Navigation("ChannelsLocked");

                    b.Navigation("Messages");

                    b.Navigation("MessagesDeletedAsModerator");

                    b.Navigation("ModeratedSins");

                    b.Navigation("NicknamesHistory");

                    b.Navigation("Reactions");

                    b.Navigation("SinsPardoned");

                    b.Navigation("TrackedUsers");

                    b.Navigation("Trackers");

                    b.Navigation("UserSins");

                    b.Navigation("XpHistory");
                });

            modelBuilder.Entity("Cybermancy.Domain.Message", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("MessageHistory");

                    b.Navigation("Reactions");
                });

            modelBuilder.Entity("Cybermancy.Domain.Role", b =>
                {
                    b.Navigation("Reward");
                });

            modelBuilder.Entity("Cybermancy.Domain.Sin", b =>
                {
                    b.Navigation("Mute");

                    b.Navigation("Pardon");

                    b.Navigation("PublishMessages");
                });

            modelBuilder.Entity("Cybermancy.Domain.User", b =>
                {
                    b.Navigation("MemberProfiles");

                    b.Navigation("UsernameHistories");
                });
#pragma warning restore 612, 618
        }
    }
}
